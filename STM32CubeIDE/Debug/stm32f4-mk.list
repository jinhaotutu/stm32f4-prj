
stm32f4-mk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001858  08001858  00011858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018f0  080018f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080018f0  080018f0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018f0  080018f0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f0  080018f0  000118f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080018f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000074  0800196c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800196c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   000044f3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00003e2c  00000000  00000000  00024597  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00000bb8  00000000  00000000  000283c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004a0  00000000  00000000  00028f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00065a4a  00000000  00000000  00029420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000418  00000000  00000000  0008ee70  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00002ae3  00000000  00000000  0008f288  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00091d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018f0  00000000  00000000  00091de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  000936d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00093774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001840 	.word	0x08001840

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08001840 	.word	0x08001840

080001e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ee:	490e      	ldr	r1, [pc, #56]	; (8000228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f0:	4a0e      	ldr	r2, [pc, #56]	; (800022c <LoopForever+0xe>)
  movs r3, #0
 80001f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f4:	e002      	b.n	80001fc <LoopCopyDataInit>

080001f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001fa:	3304      	adds	r3, #4

080001fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000200:	d3f9      	bcc.n	80001f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000202:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000204:	4c0b      	ldr	r4, [pc, #44]	; (8000234 <LoopForever+0x16>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000208:	e001      	b.n	800020e <LoopFillZerobss>

0800020a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800020a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800020c:	3204      	adds	r2, #4

0800020e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800020e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000210:	d3fb      	bcc.n	800020a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000212:	f000 fc29 	bl	8000a68 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000216:	f000 fe41 	bl	8000e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021a:	f000 fdeb 	bl	8000df4 <main>

0800021e <LoopForever>:

LoopForever:
    b LoopForever
 800021e:	e7fe      	b.n	800021e <LoopForever>
  ldr   r0, =_estack
 8000220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000228:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800022c:	080018f8 	.word	0x080018f8
  ldr r2, =_sbss
 8000230:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000234:	200000a0 	.word	0x200000a0

08000238 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000238:	e7fe      	b.n	8000238 <ADC_IRQHandler>

0800023a <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800023a:	b480      	push	{r7}
 800023c:	b087      	sub	sp, #28
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000244:	2300      	movs	r3, #0
 8000246:	617b      	str	r3, [r7, #20]
 8000248:	2300      	movs	r3, #0
 800024a:	613b      	str	r3, [r7, #16]
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000250:	2300      	movs	r3, #0
 8000252:	617b      	str	r3, [r7, #20]
 8000254:	e076      	b.n	8000344 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000256:	2201      	movs	r2, #1
 8000258:	697b      	ldr	r3, [r7, #20]
 800025a:	fa02 f303 	lsl.w	r3, r2, r3
 800025e:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	693a      	ldr	r2, [r7, #16]
 8000266:	4013      	ands	r3, r2
 8000268:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	693b      	ldr	r3, [r7, #16]
 800026e:	429a      	cmp	r2, r3
 8000270:	d165      	bne.n	800033e <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	2103      	movs	r1, #3
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	43db      	mvns	r3, r3
 8000282:	401a      	ands	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	791b      	ldrb	r3, [r3, #4]
 8000290:	4619      	mov	r1, r3
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	791b      	ldrb	r3, [r3, #4]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d003      	beq.n	80002b0 <GPIO_Init+0x76>
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	791b      	ldrb	r3, [r3, #4]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d12e      	bne.n	800030e <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	689a      	ldr	r2, [r3, #8]
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	2103      	movs	r1, #3
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	43db      	mvns	r3, r3
 80002c0:	401a      	ands	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	689a      	ldr	r2, [r3, #8]
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	795b      	ldrb	r3, [r3, #5]
 80002ce:	4619      	mov	r1, r3
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	fa01 f303 	lsl.w	r3, r1, r3
 80002d8:	431a      	orrs	r2, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	685a      	ldr	r2, [r3, #4]
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	2301      	movs	r3, #1
 80002ea:	408b      	lsls	r3, r1
 80002ec:	43db      	mvns	r3, r3
 80002ee:	401a      	ands	r2, r3
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	683a      	ldr	r2, [r7, #0]
 80002fa:	7992      	ldrb	r2, [r2, #6]
 80002fc:	4611      	mov	r1, r2
 80002fe:	697a      	ldr	r2, [r7, #20]
 8000300:	b292      	uxth	r2, r2
 8000302:	fa01 f202 	lsl.w	r2, r1, r2
 8000306:	b292      	uxth	r2, r2
 8000308:	431a      	orrs	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	68da      	ldr	r2, [r3, #12]
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	b29b      	uxth	r3, r3
 8000316:	005b      	lsls	r3, r3, #1
 8000318:	2103      	movs	r1, #3
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	43db      	mvns	r3, r3
 8000320:	401a      	ands	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	68da      	ldr	r2, [r3, #12]
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	79db      	ldrb	r3, [r3, #7]
 800032e:	4619      	mov	r1, r3
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	fa01 f303 	lsl.w	r3, r1, r3
 8000338:	431a      	orrs	r2, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	2b0f      	cmp	r3, #15
 8000348:	d985      	bls.n	8000256 <GPIO_Init+0x1c>
    }
  }
}
 800034a:	bf00      	nop
 800034c:	371c      	adds	r7, #28
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr

08000356 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
 800035e:	460b      	mov	r3, r1
 8000360:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	887a      	ldrh	r2, [r7, #2]
 8000366:	831a      	strh	r2, [r3, #24]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	887a      	ldrh	r2, [r7, #2]
 8000384:	835a      	strh	r2, [r3, #26]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000392:	b480      	push	{r7}
 8000394:	b085      	sub	sp, #20
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	460b      	mov	r3, r1
 800039c:	807b      	strh	r3, [r7, #2]
 800039e:	4613      	mov	r3, r2
 80003a0:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003aa:	787a      	ldrb	r2, [r7, #1]
 80003ac:	887b      	ldrh	r3, [r7, #2]
 80003ae:	f003 0307 	and.w	r3, r3, #7
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	fa02 f303 	lsl.w	r3, r2, r3
 80003b8:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003ba:	887b      	ldrh	r3, [r7, #2]
 80003bc:	08db      	lsrs	r3, r3, #3
 80003be:	b29b      	uxth	r3, r3
 80003c0:	461a      	mov	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	3208      	adds	r2, #8
 80003c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ca:	887b      	ldrh	r3, [r7, #2]
 80003cc:	f003 0307 	and.w	r3, r3, #7
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	210f      	movs	r1, #15
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	8879      	ldrh	r1, [r7, #2]
 80003dc:	08c9      	lsrs	r1, r1, #3
 80003de:	b289      	uxth	r1, r1
 80003e0:	4608      	mov	r0, r1
 80003e2:	ea02 0103 	and.w	r1, r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f100 0208 	add.w	r2, r0, #8
 80003ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	08db      	lsrs	r3, r3, #3
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	461a      	mov	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3208      	adds	r2, #8
 80003fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000400:	68fa      	ldr	r2, [r7, #12]
 8000402:	4313      	orrs	r3, r2
 8000404:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000406:	887b      	ldrh	r3, [r7, #2]
 8000408:	08db      	lsrs	r3, r3, #3
 800040a:	b29b      	uxth	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3208      	adds	r2, #8
 8000412:	68b9      	ldr	r1, [r7, #8]
 8000414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000418:	bf00      	nop
 800041a:	3714      	adds	r7, #20
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <RCC_DeInit+0x60>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <RCC_DeInit+0x60>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <RCC_DeInit+0x60>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <RCC_DeInit+0x60>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <RCC_DeInit+0x60>)
 8000440:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000444:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000448:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <RCC_DeInit+0x60>)
 800044c:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <RCC_DeInit+0x64>)
 800044e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <RCC_DeInit+0x60>)
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <RCC_DeInit+0x68>)
 8000454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <RCC_DeInit+0x60>)
 800045a:	4a0d      	ldr	r2, [pc, #52]	; (8000490 <RCC_DeInit+0x6c>)
 800045c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <RCC_DeInit+0x60>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <RCC_DeInit+0x60>)
 8000466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800046a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <RCC_DeInit+0x60>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000;
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <RCC_DeInit+0x60>)
 8000474:	2200      	movs	r2, #0
 8000476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx */  
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800
 8000488:	24003010 	.word	0x24003010
 800048c:	20003000 	.word	0x20003000
 8000490:	24003000 	.word	0x24003000

08000494 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <RCC_HSEConfig+0x24>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <RCC_HSEConfig+0x24>)
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	7013      	strb	r3, [r2, #0]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40023802 	.word	0x40023802

080004bc <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 80004ca:	2300      	movs	r3, #0
 80004cc:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80004ce:	2031      	movs	r0, #49	; 0x31
 80004d0:	f000 f9b6 	bl	8000840 <RCC_GetFlagStatus>
 80004d4:	4603      	mov	r3, r0
 80004d6:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	3301      	adds	r3, #1
 80004dc:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80004e4:	d002      	beq.n	80004ec <RCC_WaitForHSEStartUp+0x30>
 80004e6:	79bb      	ldrb	r3, [r7, #6]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d0f0      	beq.n	80004ce <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80004ec:	2031      	movs	r0, #49	; 0x31
 80004ee:	f000 f9a7 	bl	8000840 <RCC_GetFlagStatus>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 80004f8:	2301      	movs	r3, #1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	e001      	b.n	8000502 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 80004fe:	2300      	movs	r3, #0
 8000500:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000502:	79fb      	ldrb	r3, [r7, #7]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	019a      	lsls	r2, r3, #6
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	431a      	orrs	r2, r3
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	085b      	lsrs	r3, r3, #1
 8000526:	3b01      	subs	r3, #1
 8000528:	041b      	lsls	r3, r3, #16
 800052a:	431a      	orrs	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000534:	4904      	ldr	r1, [pc, #16]	; (8000548 <RCC_PLLConfig+0x3c>)
 8000536:	4313      	orrs	r3, r2
 8000538:	604b      	str	r3, [r1, #4]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800

0800054c <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000556:	4a04      	ldr	r2, [pc, #16]	; (8000568 <RCC_PLLCmd+0x1c>)
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	42470060 	.word	0x42470060

0800056c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <RCC_SYSCLKConfig+0x34>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f023 0303 	bic.w	r3, r3, #3
 8000584:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4313      	orrs	r3, r2
 800058c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800058e:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <RCC_SYSCLKConfig+0x34>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	6093      	str	r3, [r2, #8]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40023800 	.word	0x40023800

080005a4 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
  *              - 0x0C: PLL R used as system clock (only for STM32F412xG and STM32F446xx devices)
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <RCC_GetSYSCLKSource+0x1c>)
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	f003 030c 	and.w	r3, r3, #12
 80005b2:	b2db      	uxtb	r3, r3
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800

080005c4 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <RCC_HCLKConfig+0x34>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <RCC_HCLKConfig+0x34>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6093      	str	r3, [r2, #8]
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40023800 	.word	0x40023800

080005fc <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <RCC_PCLK1Config+0x34>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000614:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4313      	orrs	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <RCC_PCLK1Config+0x34>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6093      	str	r3, [r2, #8]
}
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	40023800 	.word	0x40023800

08000634 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <RCC_PCLK2Config+0x38>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800064c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	4313      	orrs	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000658:	4a04      	ldr	r2, [pc, #16]	; (800066c <RCC_PCLK2Config+0x38>)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	6093      	str	r3, [r2, #8]
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000670:	b480      	push	{r7}
 8000672:	b089      	sub	sp, #36	; 0x24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	2302      	movs	r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000690:	4b47      	ldr	r3, [pc, #284]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	f003 030c 	and.w	r3, r3, #12
 8000698:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	2b04      	cmp	r3, #4
 800069e:	d007      	beq.n	80006b0 <RCC_GetClocksFreq+0x40>
 80006a0:	2b08      	cmp	r3, #8
 80006a2:	d009      	beq.n	80006b8 <RCC_GetClocksFreq+0x48>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d13d      	bne.n	8000724 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a42      	ldr	r2, [pc, #264]	; (80007b4 <RCC_GetClocksFreq+0x144>)
 80006ac:	601a      	str	r2, [r3, #0]
    break;
 80006ae:	e03d      	b.n	800072c <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a41      	ldr	r2, [pc, #260]	; (80007b8 <RCC_GetClocksFreq+0x148>)
 80006b4:	601a      	str	r2, [r3, #0]
    break;
 80006b6:	e039      	b.n	800072c <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006b8:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	0d9b      	lsrs	r3, r3, #22
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006c4:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006cc:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00c      	beq.n	80006ee <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006d4:	4a38      	ldr	r2, [pc, #224]	; (80007b8 <RCC_GetClocksFreq+0x148>)
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006dc:	4a34      	ldr	r2, [pc, #208]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 80006de:	6852      	ldr	r2, [r2, #4]
 80006e0:	0992      	lsrs	r2, r2, #6
 80006e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006e6:	fb02 f303 	mul.w	r3, r2, r3
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	e00b      	b.n	8000706 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006ee:	4a31      	ldr	r2, [pc, #196]	; (80007b4 <RCC_GetClocksFreq+0x144>)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f6:	4a2e      	ldr	r2, [pc, #184]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 80006f8:	6852      	ldr	r2, [r2, #4]
 80006fa:	0992      	lsrs	r2, r2, #6
 80006fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000706:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	0c1b      	lsrs	r3, r3, #16
 800070c:	f003 0303 	and.w	r3, r3, #3
 8000710:	3301      	adds	r3, #1
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000716:	69fa      	ldr	r2, [r7, #28]
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	fbb2 f2f3 	udiv	r2, r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
    break;
 8000722:	e003      	b.n	800072c <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a23      	ldr	r2, [pc, #140]	; (80007b4 <RCC_GetClocksFreq+0x144>)
 8000728:	601a      	str	r2, [r3, #0]
    break;
 800072a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000734:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	091b      	lsrs	r3, r3, #4
 800073a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800073c:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <RCC_GetClocksFreq+0x14c>)
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	b2db      	uxtb	r3, r3
 8000746:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	40da      	lsrs	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800075c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	0a9b      	lsrs	r3, r3, #10
 8000762:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000764:	4a15      	ldr	r2, [pc, #84]	; (80007bc <RCC_GetClocksFreq+0x14c>)
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	40da      	lsrs	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <RCC_GetClocksFreq+0x140>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000784:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	0b5b      	lsrs	r3, r3, #13
 800078a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <RCC_GetClocksFreq+0x14c>)
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	40da      	lsrs	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	60da      	str	r2, [r3, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3724      	adds	r7, #36	; 0x24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	40023800 	.word	0x40023800
 80007b4:	00f42400 	.word	0x00f42400
 80007b8:	007a1200 	.word	0x007a1200
 80007bc:	20000000 	.word	0x20000000

080007c0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007cc:	78fb      	ldrb	r3, [r7, #3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d006      	beq.n	80007e0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d6:	4909      	ldr	r1, [pc, #36]	; (80007fc <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4313      	orrs	r3, r2
 80007dc:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007de:	e006      	b.n	80007ee <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <RCC_AHB1PeriphClockCmd+0x3c>)
 80007e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	43db      	mvns	r3, r3
 80007e8:	4904      	ldr	r1, [pc, #16]	; (80007fc <RCC_AHB1PeriphClockCmd+0x3c>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <RCC_APB2PeriphClockCmd+0x3c>)
 8000814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000816:	4909      	ldr	r1, [pc, #36]	; (800083c <RCC_APB2PeriphClockCmd+0x3c>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4313      	orrs	r3, r2
 800081c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800081e:	e006      	b.n	800082e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <RCC_APB2PeriphClockCmd+0x3c>)
 8000822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	43db      	mvns	r3, r3
 8000828:	4904      	ldr	r1, [pc, #16]	; (800083c <RCC_APB2PeriphClockCmd+0x3c>)
 800082a:	4013      	ands	r3, r2
 800082c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000840:	b480      	push	{r7}
 8000842:	b087      	sub	sp, #28
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	095b      	lsrs	r3, r3, #5
 800085a:	b2db      	uxtb	r3, r3
 800085c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d103      	bne.n	800086c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <RCC_GetFlagStatus+0x70>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	e009      	b.n	8000880 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d103      	bne.n	800087a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <RCC_GetFlagStatus+0x70>)
 8000874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e002      	b.n	8000880 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <RCC_GetFlagStatus+0x70>)
 800087c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800087e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 031f 	and.w	r3, r3, #31
 8000886:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	fa22 f303 	lsr.w	r3, r2, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000898:	2301      	movs	r3, #1
 800089a:	74fb      	strb	r3, [r7, #19]
 800089c:	e001      	b.n	80008a2 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80008a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40023800 	.word	0x40023800

080008b4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	8a1b      	ldrh	r3, [r3, #16]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	88db      	ldrh	r3, [r3, #6]
 80008e2:	461a      	mov	r2, r3
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	4313      	orrs	r3, r2
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	899b      	ldrh	r3, [r3, #12]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000900:	f023 030c 	bic.w	r3, r3, #12
 8000904:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	889a      	ldrh	r2, [r3, #4]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	891b      	ldrh	r3, [r3, #8]
 800090e:	4313      	orrs	r3, r2
 8000910:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000916:	4313      	orrs	r3, r2
 8000918:	b29b      	uxth	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	4313      	orrs	r3, r2
 8000920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	b29a      	uxth	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	8a9b      	ldrh	r3, [r3, #20]
 800092e:	b29b      	uxth	r3, r3
 8000930:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000938:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	899b      	ldrh	r3, [r3, #12]
 800093e:	461a      	mov	r2, r3
 8000940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000942:	4313      	orrs	r3, r2
 8000944:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	b29a      	uxth	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fe8c 	bl	8000670 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a30      	ldr	r2, [pc, #192]	; (8000a1c <USART_Init+0x168>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d003      	beq.n	8000968 <USART_Init+0xb4>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a2f      	ldr	r2, [pc, #188]	; (8000a20 <USART_Init+0x16c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d102      	bne.n	800096e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	623b      	str	r3, [r7, #32]
 800096c:	e001      	b.n	8000972 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	899b      	ldrh	r3, [r3, #12]
 8000976:	b29b      	uxth	r3, r3
 8000978:	b21b      	sxth	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	da0c      	bge.n	8000998 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800097e:	6a3a      	ldr	r2, [r7, #32]
 8000980:	4613      	mov	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	009a      	lsls	r2, r3, #2
 8000988:	441a      	add	r2, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	fbb2 f3f3 	udiv	r3, r2, r3
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	e00b      	b.n	80009b0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000998:	6a3a      	ldr	r2, [r7, #32]
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	009a      	lsls	r2, r3, #2
 80009a2:	441a      	add	r2, r3
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <USART_Init+0x170>)
 80009b4:	fba2 2303 	umull	r2, r3, r2, r3
 80009b8:	095b      	lsrs	r3, r3, #5
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	091b      	lsrs	r3, r3, #4
 80009c2:	2264      	movs	r2, #100	; 0x64
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	899b      	ldrh	r3, [r3, #12]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	da0c      	bge.n	80009f4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	3332      	adds	r3, #50	; 0x32
 80009e0:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <USART_Init+0x170>)
 80009e2:	fba2 2303 	umull	r2, r3, r2, r3
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	f003 0307 	and.w	r3, r3, #7
 80009ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ee:	4313      	orrs	r3, r2
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
 80009f2:	e00b      	b.n	8000a0c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	3332      	adds	r3, #50	; 0x32
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <USART_Init+0x170>)
 80009fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000a00:	095b      	lsrs	r3, r3, #5
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	811a      	strh	r2, [r3, #8]
}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40011000 	.word	0x40011000
 8000a20:	40011400 	.word	0x40011400
 8000a24:	51eb851f 	.word	0x51eb851f

08000a28 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d008      	beq.n	8000a4c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	899b      	ldrh	r3, [r3, #12]
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000a4a:	e007      	b.n	8000a5c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	899b      	ldrh	r3, [r3, #12]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	819a      	strh	r2, [r3, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <SystemInit+0x60>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <SystemInit+0x60>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <SystemInit+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a12      	ldr	r2, [pc, #72]	; (8000acc <SystemInit+0x64>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <SystemInit+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <SystemInit+0x64>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <SystemInit+0x64>)
 8000a94:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <SystemInit+0x64>)
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <SystemInit+0x68>)
 8000aa2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <SystemInit+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <SystemInit+0x64>)
 8000aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000ab6:	f000 f80d 	bl	8000ad4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aba:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <SystemInit+0x60>)
 8000abc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac0:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	24003010 	.word	0x24003010

08000ad4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ae2:	4b36      	ldr	r3, [pc, #216]	; (8000bbc <SetSysClock+0xe8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a35      	ldr	r2, [pc, #212]	; (8000bbc <SetSysClock+0xe8>)
 8000ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aec:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000aee:	4b33      	ldr	r3, [pc, #204]	; (8000bbc <SetSysClock+0xe8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3301      	adds	r3, #1
 8000afc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d103      	bne.n	8000b0c <SetSysClock+0x38>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000b0a:	d1f0      	bne.n	8000aee <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <SetSysClock+0xe8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	e001      	b.n	8000b22 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d142      	bne.n	8000bae <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <SetSysClock+0xe8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a23      	ldr	r2, [pc, #140]	; (8000bbc <SetSysClock+0xe8>)
 8000b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <SetSysClock+0xec>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <SetSysClock+0xec>)
 8000b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b3e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <SetSysClock+0xe8>)
 8000b42:	4a1e      	ldr	r2, [pc, #120]	; (8000bbc <SetSysClock+0xe8>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <SetSysClock+0xe8>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <SetSysClock+0xe8>)
 8000b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b52:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <SetSysClock+0xe8>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <SetSysClock+0xe8>)
 8000b5a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000b5e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <SetSysClock+0xe8>)
 8000b62:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <SetSysClock+0xf0>)
 8000b64:	605a      	str	r2, [r3, #4]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <SetSysClock+0xe8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <SetSysClock+0xe8>)
 8000b6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b70:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b72:	bf00      	nop
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <SetSysClock+0xe8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f9      	beq.n	8000b74 <SetSysClock+0xa0>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */

#if defined(STM32F40_41xxx)  || defined(STM32F412xG)   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <SetSysClock+0xf4>)
 8000b82:	f240 7205 	movw	r2, #1797	; 0x705
 8000b86:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <SetSysClock+0xe8>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <SetSysClock+0xe8>)
 8000b8e:	f023 0303 	bic.w	r3, r3, #3
 8000b92:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <SetSysClock+0xe8>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <SetSysClock+0xe8>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000ba0:	bf00      	nop
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SetSysClock+0xe8>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d1f9      	bne.n	8000ba2 <SetSysClock+0xce>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000
 8000bc4:	07405419 	.word	0x07405419
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <RCC_Configuration>:
 *
 * 返回值   : 无;
 *
 **/
static void RCC_Configuration(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af02      	add	r7, sp, #8
    RCC_DeInit();
 8000bd2:	f7ff fc27 	bl	8000424 <RCC_DeInit>
		
	RCC_HSEConfig(RCC_HSE_ON);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fc5c 	bl	8000494 <RCC_HSEConfig>
	while (RCC_WaitForHSEStartUp() != SUCCESS);
 8000bdc:	bf00      	nop
 8000bde:	f7ff fc6d 	bl	80004bc <RCC_WaitForHSEStartUp>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d1fa      	bne.n	8000bde <RCC_Configuration+0x12>
	 * PLL_M = 8
	 * PLL_P = 2
	 *
	 * PLLP = 晶振 * PLL_N (PLL_M * PLL_P) = 8MHz * 336 / (8 * 2) = 168MHz 
	 */
	RCC_PLLConfig(RCC_PLLSource_HSE, 8, 336, 2, 7);
 8000be8:	2307      	movs	r3, #7
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2302      	movs	r3, #2
 8000bee:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000bf8:	f7ff fc88 	bl	800050c <RCC_PLLConfig>
	RCC_PLLCmd(ENABLE);
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fca5 	bl	800054c <RCC_PLLCmd>
	while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
 8000c02:	bf00      	nop
 8000c04:	2039      	movs	r0, #57	; 0x39
 8000c06:	f7ff fe1b 	bl	8000840 <RCC_GetFlagStatus>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0f9      	beq.n	8000c04 <RCC_Configuration+0x38>
	
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f7ff fcab 	bl	800056c <RCC_SYSCLKConfig>
	while(RCC_GetSYSCLKSource() != 0x08){}
 8000c16:	bf00      	nop
 8000c18:	f7ff fcc4 	bl	80005a4 <RCC_GetSYSCLKSource>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d1fa      	bne.n	8000c18 <RCC_Configuration+0x4c>
		
    RCC_HCLKConfig(RCC_HCLK_Div1);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fcce 	bl	80005c4 <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div4);
 8000c28:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000c2c:	f7ff fce6 	bl	80005fc <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div2);
 8000c30:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c34:	f7ff fcfe 	bl	8000634 <RCC_PCLK2Config>
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <GPIO_Configuration>:
 *
 * 返回值   : 无;
 *
 **/
static void GPIO_Configuration(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;	  
   
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8000c46:	2101      	movs	r1, #1
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff fdb9 	bl	80007c0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); 
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2010      	movs	r0, #16
 8000c52:	f7ff fdb5 	bl	80007c0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF,ENABLE);
 8000c56:	2101      	movs	r1, #1
 8000c58:	2020      	movs	r0, #32
 8000c5a:	f7ff fdb1 	bl	80007c0 <RCC_AHB1PeriphClockCmd>
    
	/* LED GPIO口配置 */
    GPIO_InitStructure.GPIO_Pin=GPIO_Pin_0|GPIO_Pin_1;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_OUT;
 8000c62:	2301      	movs	r3, #1
 8000c64:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
 8000c66:	2302      	movs	r3, #2
 8000c68:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	481d      	ldr	r0, [pc, #116]	; (8000cec <GPIO_Configuration+0xac>)
 8000c78:	f7ff fadf 	bl	800023a <GPIO_Init>
	
	GPIO_SetBits(GPIOE,GPIO_Pin_1|GPIO_Pin_0);
 8000c7c:	2103      	movs	r1, #3
 8000c7e:	481b      	ldr	r0, [pc, #108]	; (8000cec <GPIO_Configuration+0xac>)
 8000c80:	f7ff fb69 	bl	8000356 <GPIO_SetBits>
	
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_9|GPIO_Pin_10;
 8000c84:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c88:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode=GPIO_Mode_OUT;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType=GPIO_OType_PP;
 8000c92:	2300      	movs	r3, #0
 8000c94:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd=GPIO_PuPd_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <GPIO_Configuration+0xb0>)
 8000ca0:	f7ff facb 	bl	800023a <GPIO_Init>

	GPIO_SetBits(GPIOF,GPIO_Pin_9|GPIO_Pin_10);
 8000ca4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000ca8:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <GPIO_Configuration+0xb0>)
 8000caa:	f7ff fb54 	bl	8000356 <GPIO_SetBits>

	/* USART1 GPIO口配置 */
	GPIO_InitStructure.GPIO_Pin=GPIO_Pin_9 | GPIO_Pin_10;
 8000cae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cb2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <GPIO_Configuration+0xb4>)
 8000cca:	f7ff fab6 	bl	800023a <GPIO_Init>
	
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1);
 8000cce:	2207      	movs	r2, #7
 8000cd0:	2109      	movs	r1, #9
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <GPIO_Configuration+0xb4>)
 8000cd4:	f7ff fb5d 	bl	8000392 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1);
 8000cd8:	2207      	movs	r2, #7
 8000cda:	210a      	movs	r1, #10
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <GPIO_Configuration+0xb4>)
 8000cde:	f7ff fb58 	bl	8000392 <GPIO_PinAFConfig>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40021400 	.word	0x40021400
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <NVIC_Configuration>:
 *
 * 返回值   : 无;
 *
 **/
static void NVIC_Configuration(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <USART_Configuration>:
 *
 * 返回值   : 无;
 *
 **/
static void USART_Configuration(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
	USART_InitTypeDef USART_InitStructure;
	
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8000d0e:	2101      	movs	r1, #1
 8000d10:	2010      	movs	r0, #16
 8000d12:	f7ff fd75 	bl	8000800 <RCC_APB2PeriphClockCmd>
	
	USART_InitStructure.USART_BaudRate = 115200;         
 8000d16:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d1a:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000d24:	2300      	movs	r3, #0
 8000d26:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; 
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	817b      	strh	r3, [r7, #10]
	USART_Init(USART1, &USART_InitStructure);
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <USART_Configuration+0x44>)
 8000d36:	f7ff fdbd 	bl	80008b4 <USART_Init>

	USART_Cmd(USART1,ENABLE);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <USART_Configuration+0x44>)
 8000d3e:	f7ff fe73 	bl	8000a28 <USART_Cmd>
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40011000 	.word	0x40011000

08000d50 <Sys_Config>:
 *
 * 返回值   : 无;
 *
 **/
void Sys_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	RCC_Configuration();
 8000d54:	f7ff ff3a 	bl	8000bcc <RCC_Configuration>
	
    GPIO_Configuration();
 8000d58:	f7ff ff72 	bl	8000c40 <GPIO_Configuration>
	
	NVIC_Configuration();
 8000d5c:	f7ff ffcc 	bl	8000cf8 <NVIC_Configuration>
	 
	USART_Configuration();
 8000d60:	f7ff ffd2 	bl	8000d08 <USART_Configuration>
	
	Delay_Configuration();
 8000d64:	f000 f808 	bl	8000d78 <Delay_Configuration>
	
	printf("\r\n\r\n***********STM32 System Config!***********\r\n\r\n");
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <Sys_Config+0x24>)
 8000d6a:	f000 f91f 	bl	8000fac <puts>
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	08001858 	.word	0x08001858

08000d78 <Delay_Configuration>:
				
/* Functions ------------------------------------------------------------------*/			


void Delay_Configuration(void)  
{  
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;     //时钟源为系统时钟168MHz  
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <Delay_Configuration+0x20>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <Delay_Configuration+0x20>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6013      	str	r3, [r2, #0]
    SysTick->LOAD = 167;                             //重载值为168-1，每1us溢出一次  
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <Delay_Configuration+0x20>)
 8000d8a:	22a7      	movs	r2, #167	; 0xa7
 8000d8c:	605a      	str	r2, [r3, #4]
}  
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <delay_ms>:

void delay_ms(vu32 nTime)  
{  
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    nTime *= 1000;  
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000daa:	fb02 f303 	mul.w	r3, r2, r3
 8000dae:	607b      	str	r3, [r7, #4]
    SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;        //使能SysTick，开始计数  
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <delay_ms+0x54>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <delay_ms+0x54>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]
    while(nTime--){  
 8000dbc:	e006      	b.n	8000dcc <delay_ms+0x30>
        while((SysTick->CTRL&0X010000) == 0);        //等待COUNTFLAG标志位置1  
 8000dbe:	bf00      	nop
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <delay_ms+0x54>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f9      	beq.n	8000dc0 <delay_ms+0x24>
    while(nTime--){  
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1e5a      	subs	r2, r3, #1
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f3      	bne.n	8000dbe <delay_ms+0x22>
    }  
    SysTick->CTRL &= (~SysTick_CTRL_ENABLE_Msk);     //失能SysTick，停止计数  
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <delay_ms+0x54>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <delay_ms+0x54>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6013      	str	r3, [r2, #0]
}  
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	/* stm32系统配置 */
	 Sys_Config();
 8000df8:	f7ff ffaa 	bl	8000d50 <Sys_Config>

	while(1)
	{
		 LED3_ON;
 8000dfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <main+0x44>)
 8000e02:	f7ff fab7 	bl	8000374 <GPIO_ResetBits>
		 LED4_OFF;
 8000e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <main+0x44>)
 8000e0c:	f7ff faa3 	bl	8000356 <GPIO_SetBits>
		 delay_ms(500);
 8000e10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e14:	f7ff ffc2 	bl	8000d9c <delay_ms>

		 LED3_OFF;
 8000e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <main+0x44>)
 8000e1e:	f7ff fa9a 	bl	8000356 <GPIO_SetBits>
		 LED4_ON;
 8000e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <main+0x44>)
 8000e28:	f7ff faa4 	bl	8000374 <GPIO_ResetBits>
		 delay_ms(500);
 8000e2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e30:	f7ff ffb4 	bl	8000d9c <delay_ms>
		 LED3_ON;
 8000e34:	e7e2      	b.n	8000dfc <main+0x8>
 8000e36:	bf00      	nop
 8000e38:	40021400 	.word	0x40021400

08000e3c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
	...

08000e9c <__libc_init_array>:
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	4e0d      	ldr	r6, [pc, #52]	; (8000ed4 <__libc_init_array+0x38>)
 8000ea0:	4c0d      	ldr	r4, [pc, #52]	; (8000ed8 <__libc_init_array+0x3c>)
 8000ea2:	1ba4      	subs	r4, r4, r6
 8000ea4:	10a4      	asrs	r4, r4, #2
 8000ea6:	2500      	movs	r5, #0
 8000ea8:	42a5      	cmp	r5, r4
 8000eaa:	d109      	bne.n	8000ec0 <__libc_init_array+0x24>
 8000eac:	4e0b      	ldr	r6, [pc, #44]	; (8000edc <__libc_init_array+0x40>)
 8000eae:	4c0c      	ldr	r4, [pc, #48]	; (8000ee0 <__libc_init_array+0x44>)
 8000eb0:	f000 fcc6 	bl	8001840 <_init>
 8000eb4:	1ba4      	subs	r4, r4, r6
 8000eb6:	10a4      	asrs	r4, r4, #2
 8000eb8:	2500      	movs	r5, #0
 8000eba:	42a5      	cmp	r5, r4
 8000ebc:	d105      	bne.n	8000eca <__libc_init_array+0x2e>
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec4:	4798      	blx	r3
 8000ec6:	3501      	adds	r5, #1
 8000ec8:	e7ee      	b.n	8000ea8 <__libc_init_array+0xc>
 8000eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ece:	4798      	blx	r3
 8000ed0:	3501      	adds	r5, #1
 8000ed2:	e7f2      	b.n	8000eba <__libc_init_array+0x1e>
 8000ed4:	080018f0 	.word	0x080018f0
 8000ed8:	080018f0 	.word	0x080018f0
 8000edc:	080018f0 	.word	0x080018f0
 8000ee0:	080018f4 	.word	0x080018f4

08000ee4 <memset>:
 8000ee4:	4402      	add	r2, r0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d100      	bne.n	8000eee <memset+0xa>
 8000eec:	4770      	bx	lr
 8000eee:	f803 1b01 	strb.w	r1, [r3], #1
 8000ef2:	e7f9      	b.n	8000ee8 <memset+0x4>

08000ef4 <_puts_r>:
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	460e      	mov	r6, r1
 8000ef8:	4605      	mov	r5, r0
 8000efa:	b118      	cbz	r0, 8000f04 <_puts_r+0x10>
 8000efc:	6983      	ldr	r3, [r0, #24]
 8000efe:	b90b      	cbnz	r3, 8000f04 <_puts_r+0x10>
 8000f00:	f000 fa0c 	bl	800131c <__sinit>
 8000f04:	69ab      	ldr	r3, [r5, #24]
 8000f06:	68ac      	ldr	r4, [r5, #8]
 8000f08:	b913      	cbnz	r3, 8000f10 <_puts_r+0x1c>
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f000 fa06 	bl	800131c <__sinit>
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <_puts_r+0xac>)
 8000f12:	429c      	cmp	r4, r3
 8000f14:	d117      	bne.n	8000f46 <_puts_r+0x52>
 8000f16:	686c      	ldr	r4, [r5, #4]
 8000f18:	89a3      	ldrh	r3, [r4, #12]
 8000f1a:	071b      	lsls	r3, r3, #28
 8000f1c:	d51d      	bpl.n	8000f5a <_puts_r+0x66>
 8000f1e:	6923      	ldr	r3, [r4, #16]
 8000f20:	b1db      	cbz	r3, 8000f5a <_puts_r+0x66>
 8000f22:	3e01      	subs	r6, #1
 8000f24:	68a3      	ldr	r3, [r4, #8]
 8000f26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	60a3      	str	r3, [r4, #8]
 8000f2e:	b9e9      	cbnz	r1, 8000f6c <_puts_r+0x78>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	da2e      	bge.n	8000f92 <_puts_r+0x9e>
 8000f34:	4622      	mov	r2, r4
 8000f36:	210a      	movs	r1, #10
 8000f38:	4628      	mov	r0, r5
 8000f3a:	f000 f83f 	bl	8000fbc <__swbuf_r>
 8000f3e:	3001      	adds	r0, #1
 8000f40:	d011      	beq.n	8000f66 <_puts_r+0x72>
 8000f42:	200a      	movs	r0, #10
 8000f44:	e011      	b.n	8000f6a <_puts_r+0x76>
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <_puts_r+0xb0>)
 8000f48:	429c      	cmp	r4, r3
 8000f4a:	d101      	bne.n	8000f50 <_puts_r+0x5c>
 8000f4c:	68ac      	ldr	r4, [r5, #8]
 8000f4e:	e7e3      	b.n	8000f18 <_puts_r+0x24>
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <_puts_r+0xb4>)
 8000f52:	429c      	cmp	r4, r3
 8000f54:	bf08      	it	eq
 8000f56:	68ec      	ldreq	r4, [r5, #12]
 8000f58:	e7de      	b.n	8000f18 <_puts_r+0x24>
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	f000 f87f 	bl	8001060 <__swsetup_r>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d0dd      	beq.n	8000f22 <_puts_r+0x2e>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	da04      	bge.n	8000f7a <_puts_r+0x86>
 8000f70:	69a2      	ldr	r2, [r4, #24]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	dc06      	bgt.n	8000f84 <_puts_r+0x90>
 8000f76:	290a      	cmp	r1, #10
 8000f78:	d004      	beq.n	8000f84 <_puts_r+0x90>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	6022      	str	r2, [r4, #0]
 8000f80:	7019      	strb	r1, [r3, #0]
 8000f82:	e7cf      	b.n	8000f24 <_puts_r+0x30>
 8000f84:	4622      	mov	r2, r4
 8000f86:	4628      	mov	r0, r5
 8000f88:	f000 f818 	bl	8000fbc <__swbuf_r>
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	d1c9      	bne.n	8000f24 <_puts_r+0x30>
 8000f90:	e7e9      	b.n	8000f66 <_puts_r+0x72>
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	200a      	movs	r0, #10
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	6022      	str	r2, [r4, #0]
 8000f9a:	7018      	strb	r0, [r3, #0]
 8000f9c:	e7e5      	b.n	8000f6a <_puts_r+0x76>
 8000f9e:	bf00      	nop
 8000fa0:	080018b0 	.word	0x080018b0
 8000fa4:	080018d0 	.word	0x080018d0
 8000fa8:	08001890 	.word	0x08001890

08000fac <puts>:
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <puts+0xc>)
 8000fae:	4601      	mov	r1, r0
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f7ff bf9f 	b.w	8000ef4 <_puts_r>
 8000fb6:	bf00      	nop
 8000fb8:	20000010 	.word	0x20000010

08000fbc <__swbuf_r>:
 8000fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fbe:	460e      	mov	r6, r1
 8000fc0:	4614      	mov	r4, r2
 8000fc2:	4605      	mov	r5, r0
 8000fc4:	b118      	cbz	r0, 8000fce <__swbuf_r+0x12>
 8000fc6:	6983      	ldr	r3, [r0, #24]
 8000fc8:	b90b      	cbnz	r3, 8000fce <__swbuf_r+0x12>
 8000fca:	f000 f9a7 	bl	800131c <__sinit>
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <__swbuf_r+0x98>)
 8000fd0:	429c      	cmp	r4, r3
 8000fd2:	d12a      	bne.n	800102a <__swbuf_r+0x6e>
 8000fd4:	686c      	ldr	r4, [r5, #4]
 8000fd6:	69a3      	ldr	r3, [r4, #24]
 8000fd8:	60a3      	str	r3, [r4, #8]
 8000fda:	89a3      	ldrh	r3, [r4, #12]
 8000fdc:	071a      	lsls	r2, r3, #28
 8000fde:	d52e      	bpl.n	800103e <__swbuf_r+0x82>
 8000fe0:	6923      	ldr	r3, [r4, #16]
 8000fe2:	b363      	cbz	r3, 800103e <__swbuf_r+0x82>
 8000fe4:	6923      	ldr	r3, [r4, #16]
 8000fe6:	6820      	ldr	r0, [r4, #0]
 8000fe8:	1ac0      	subs	r0, r0, r3
 8000fea:	6963      	ldr	r3, [r4, #20]
 8000fec:	b2f6      	uxtb	r6, r6
 8000fee:	4283      	cmp	r3, r0
 8000ff0:	4637      	mov	r7, r6
 8000ff2:	dc04      	bgt.n	8000ffe <__swbuf_r+0x42>
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	4628      	mov	r0, r5
 8000ff8:	f000 f926 	bl	8001248 <_fflush_r>
 8000ffc:	bb28      	cbnz	r0, 800104a <__swbuf_r+0x8e>
 8000ffe:	68a3      	ldr	r3, [r4, #8]
 8001000:	3b01      	subs	r3, #1
 8001002:	60a3      	str	r3, [r4, #8]
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	6022      	str	r2, [r4, #0]
 800100a:	701e      	strb	r6, [r3, #0]
 800100c:	6963      	ldr	r3, [r4, #20]
 800100e:	3001      	adds	r0, #1
 8001010:	4283      	cmp	r3, r0
 8001012:	d004      	beq.n	800101e <__swbuf_r+0x62>
 8001014:	89a3      	ldrh	r3, [r4, #12]
 8001016:	07db      	lsls	r3, r3, #31
 8001018:	d519      	bpl.n	800104e <__swbuf_r+0x92>
 800101a:	2e0a      	cmp	r6, #10
 800101c:	d117      	bne.n	800104e <__swbuf_r+0x92>
 800101e:	4621      	mov	r1, r4
 8001020:	4628      	mov	r0, r5
 8001022:	f000 f911 	bl	8001248 <_fflush_r>
 8001026:	b190      	cbz	r0, 800104e <__swbuf_r+0x92>
 8001028:	e00f      	b.n	800104a <__swbuf_r+0x8e>
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <__swbuf_r+0x9c>)
 800102c:	429c      	cmp	r4, r3
 800102e:	d101      	bne.n	8001034 <__swbuf_r+0x78>
 8001030:	68ac      	ldr	r4, [r5, #8]
 8001032:	e7d0      	b.n	8000fd6 <__swbuf_r+0x1a>
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <__swbuf_r+0xa0>)
 8001036:	429c      	cmp	r4, r3
 8001038:	bf08      	it	eq
 800103a:	68ec      	ldreq	r4, [r5, #12]
 800103c:	e7cb      	b.n	8000fd6 <__swbuf_r+0x1a>
 800103e:	4621      	mov	r1, r4
 8001040:	4628      	mov	r0, r5
 8001042:	f000 f80d 	bl	8001060 <__swsetup_r>
 8001046:	2800      	cmp	r0, #0
 8001048:	d0cc      	beq.n	8000fe4 <__swbuf_r+0x28>
 800104a:	f04f 37ff 	mov.w	r7, #4294967295
 800104e:	4638      	mov	r0, r7
 8001050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001052:	bf00      	nop
 8001054:	080018b0 	.word	0x080018b0
 8001058:	080018d0 	.word	0x080018d0
 800105c:	08001890 	.word	0x08001890

08001060 <__swsetup_r>:
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <__swsetup_r+0xcc>)
 8001062:	b570      	push	{r4, r5, r6, lr}
 8001064:	681d      	ldr	r5, [r3, #0]
 8001066:	4606      	mov	r6, r0
 8001068:	460c      	mov	r4, r1
 800106a:	b125      	cbz	r5, 8001076 <__swsetup_r+0x16>
 800106c:	69ab      	ldr	r3, [r5, #24]
 800106e:	b913      	cbnz	r3, 8001076 <__swsetup_r+0x16>
 8001070:	4628      	mov	r0, r5
 8001072:	f000 f953 	bl	800131c <__sinit>
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <__swsetup_r+0xd0>)
 8001078:	429c      	cmp	r4, r3
 800107a:	d10f      	bne.n	800109c <__swsetup_r+0x3c>
 800107c:	686c      	ldr	r4, [r5, #4]
 800107e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001082:	b29a      	uxth	r2, r3
 8001084:	0715      	lsls	r5, r2, #28
 8001086:	d42c      	bmi.n	80010e2 <__swsetup_r+0x82>
 8001088:	06d0      	lsls	r0, r2, #27
 800108a:	d411      	bmi.n	80010b0 <__swsetup_r+0x50>
 800108c:	2209      	movs	r2, #9
 800108e:	6032      	str	r2, [r6, #0]
 8001090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001094:	81a3      	strh	r3, [r4, #12]
 8001096:	f04f 30ff 	mov.w	r0, #4294967295
 800109a:	e03e      	b.n	800111a <__swsetup_r+0xba>
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <__swsetup_r+0xd4>)
 800109e:	429c      	cmp	r4, r3
 80010a0:	d101      	bne.n	80010a6 <__swsetup_r+0x46>
 80010a2:	68ac      	ldr	r4, [r5, #8]
 80010a4:	e7eb      	b.n	800107e <__swsetup_r+0x1e>
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <__swsetup_r+0xd8>)
 80010a8:	429c      	cmp	r4, r3
 80010aa:	bf08      	it	eq
 80010ac:	68ec      	ldreq	r4, [r5, #12]
 80010ae:	e7e6      	b.n	800107e <__swsetup_r+0x1e>
 80010b0:	0751      	lsls	r1, r2, #29
 80010b2:	d512      	bpl.n	80010da <__swsetup_r+0x7a>
 80010b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010b6:	b141      	cbz	r1, 80010ca <__swsetup_r+0x6a>
 80010b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010bc:	4299      	cmp	r1, r3
 80010be:	d002      	beq.n	80010c6 <__swsetup_r+0x66>
 80010c0:	4630      	mov	r0, r6
 80010c2:	f000 fa19 	bl	80014f8 <_free_r>
 80010c6:	2300      	movs	r3, #0
 80010c8:	6363      	str	r3, [r4, #52]	; 0x34
 80010ca:	89a3      	ldrh	r3, [r4, #12]
 80010cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80010d0:	81a3      	strh	r3, [r4, #12]
 80010d2:	2300      	movs	r3, #0
 80010d4:	6063      	str	r3, [r4, #4]
 80010d6:	6923      	ldr	r3, [r4, #16]
 80010d8:	6023      	str	r3, [r4, #0]
 80010da:	89a3      	ldrh	r3, [r4, #12]
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	81a3      	strh	r3, [r4, #12]
 80010e2:	6923      	ldr	r3, [r4, #16]
 80010e4:	b94b      	cbnz	r3, 80010fa <__swsetup_r+0x9a>
 80010e6:	89a3      	ldrh	r3, [r4, #12]
 80010e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80010ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f0:	d003      	beq.n	80010fa <__swsetup_r+0x9a>
 80010f2:	4621      	mov	r1, r4
 80010f4:	4630      	mov	r0, r6
 80010f6:	f000 f9bf 	bl	8001478 <__smakebuf_r>
 80010fa:	89a2      	ldrh	r2, [r4, #12]
 80010fc:	f012 0301 	ands.w	r3, r2, #1
 8001100:	d00c      	beq.n	800111c <__swsetup_r+0xbc>
 8001102:	2300      	movs	r3, #0
 8001104:	60a3      	str	r3, [r4, #8]
 8001106:	6963      	ldr	r3, [r4, #20]
 8001108:	425b      	negs	r3, r3
 800110a:	61a3      	str	r3, [r4, #24]
 800110c:	6923      	ldr	r3, [r4, #16]
 800110e:	b953      	cbnz	r3, 8001126 <__swsetup_r+0xc6>
 8001110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001114:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001118:	d1ba      	bne.n	8001090 <__swsetup_r+0x30>
 800111a:	bd70      	pop	{r4, r5, r6, pc}
 800111c:	0792      	lsls	r2, r2, #30
 800111e:	bf58      	it	pl
 8001120:	6963      	ldrpl	r3, [r4, #20]
 8001122:	60a3      	str	r3, [r4, #8]
 8001124:	e7f2      	b.n	800110c <__swsetup_r+0xac>
 8001126:	2000      	movs	r0, #0
 8001128:	e7f7      	b.n	800111a <__swsetup_r+0xba>
 800112a:	bf00      	nop
 800112c:	20000010 	.word	0x20000010
 8001130:	080018b0 	.word	0x080018b0
 8001134:	080018d0 	.word	0x080018d0
 8001138:	08001890 	.word	0x08001890

0800113c <__sflush_r>:
 800113c:	898a      	ldrh	r2, [r1, #12]
 800113e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001142:	4605      	mov	r5, r0
 8001144:	0710      	lsls	r0, r2, #28
 8001146:	460c      	mov	r4, r1
 8001148:	d458      	bmi.n	80011fc <__sflush_r+0xc0>
 800114a:	684b      	ldr	r3, [r1, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dc05      	bgt.n	800115c <__sflush_r+0x20>
 8001150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	dc02      	bgt.n	800115c <__sflush_r+0x20>
 8001156:	2000      	movs	r0, #0
 8001158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800115c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800115e:	2e00      	cmp	r6, #0
 8001160:	d0f9      	beq.n	8001156 <__sflush_r+0x1a>
 8001162:	2300      	movs	r3, #0
 8001164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001168:	682f      	ldr	r7, [r5, #0]
 800116a:	6a21      	ldr	r1, [r4, #32]
 800116c:	602b      	str	r3, [r5, #0]
 800116e:	d032      	beq.n	80011d6 <__sflush_r+0x9a>
 8001170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001172:	89a3      	ldrh	r3, [r4, #12]
 8001174:	075a      	lsls	r2, r3, #29
 8001176:	d505      	bpl.n	8001184 <__sflush_r+0x48>
 8001178:	6863      	ldr	r3, [r4, #4]
 800117a:	1ac0      	subs	r0, r0, r3
 800117c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800117e:	b10b      	cbz	r3, 8001184 <__sflush_r+0x48>
 8001180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001182:	1ac0      	subs	r0, r0, r3
 8001184:	2300      	movs	r3, #0
 8001186:	4602      	mov	r2, r0
 8001188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800118a:	6a21      	ldr	r1, [r4, #32]
 800118c:	4628      	mov	r0, r5
 800118e:	47b0      	blx	r6
 8001190:	1c43      	adds	r3, r0, #1
 8001192:	89a3      	ldrh	r3, [r4, #12]
 8001194:	d106      	bne.n	80011a4 <__sflush_r+0x68>
 8001196:	6829      	ldr	r1, [r5, #0]
 8001198:	291d      	cmp	r1, #29
 800119a:	d848      	bhi.n	800122e <__sflush_r+0xf2>
 800119c:	4a29      	ldr	r2, [pc, #164]	; (8001244 <__sflush_r+0x108>)
 800119e:	40ca      	lsrs	r2, r1
 80011a0:	07d6      	lsls	r6, r2, #31
 80011a2:	d544      	bpl.n	800122e <__sflush_r+0xf2>
 80011a4:	2200      	movs	r2, #0
 80011a6:	6062      	str	r2, [r4, #4]
 80011a8:	04d9      	lsls	r1, r3, #19
 80011aa:	6922      	ldr	r2, [r4, #16]
 80011ac:	6022      	str	r2, [r4, #0]
 80011ae:	d504      	bpl.n	80011ba <__sflush_r+0x7e>
 80011b0:	1c42      	adds	r2, r0, #1
 80011b2:	d101      	bne.n	80011b8 <__sflush_r+0x7c>
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	b903      	cbnz	r3, 80011ba <__sflush_r+0x7e>
 80011b8:	6560      	str	r0, [r4, #84]	; 0x54
 80011ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011bc:	602f      	str	r7, [r5, #0]
 80011be:	2900      	cmp	r1, #0
 80011c0:	d0c9      	beq.n	8001156 <__sflush_r+0x1a>
 80011c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d002      	beq.n	80011d0 <__sflush_r+0x94>
 80011ca:	4628      	mov	r0, r5
 80011cc:	f000 f994 	bl	80014f8 <_free_r>
 80011d0:	2000      	movs	r0, #0
 80011d2:	6360      	str	r0, [r4, #52]	; 0x34
 80011d4:	e7c0      	b.n	8001158 <__sflush_r+0x1c>
 80011d6:	2301      	movs	r3, #1
 80011d8:	4628      	mov	r0, r5
 80011da:	47b0      	blx	r6
 80011dc:	1c41      	adds	r1, r0, #1
 80011de:	d1c8      	bne.n	8001172 <__sflush_r+0x36>
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0c5      	beq.n	8001172 <__sflush_r+0x36>
 80011e6:	2b1d      	cmp	r3, #29
 80011e8:	d001      	beq.n	80011ee <__sflush_r+0xb2>
 80011ea:	2b16      	cmp	r3, #22
 80011ec:	d101      	bne.n	80011f2 <__sflush_r+0xb6>
 80011ee:	602f      	str	r7, [r5, #0]
 80011f0:	e7b1      	b.n	8001156 <__sflush_r+0x1a>
 80011f2:	89a3      	ldrh	r3, [r4, #12]
 80011f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f8:	81a3      	strh	r3, [r4, #12]
 80011fa:	e7ad      	b.n	8001158 <__sflush_r+0x1c>
 80011fc:	690f      	ldr	r7, [r1, #16]
 80011fe:	2f00      	cmp	r7, #0
 8001200:	d0a9      	beq.n	8001156 <__sflush_r+0x1a>
 8001202:	0793      	lsls	r3, r2, #30
 8001204:	680e      	ldr	r6, [r1, #0]
 8001206:	bf08      	it	eq
 8001208:	694b      	ldreq	r3, [r1, #20]
 800120a:	600f      	str	r7, [r1, #0]
 800120c:	bf18      	it	ne
 800120e:	2300      	movne	r3, #0
 8001210:	eba6 0807 	sub.w	r8, r6, r7
 8001214:	608b      	str	r3, [r1, #8]
 8001216:	f1b8 0f00 	cmp.w	r8, #0
 800121a:	dd9c      	ble.n	8001156 <__sflush_r+0x1a>
 800121c:	4643      	mov	r3, r8
 800121e:	463a      	mov	r2, r7
 8001220:	6a21      	ldr	r1, [r4, #32]
 8001222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001224:	4628      	mov	r0, r5
 8001226:	47b0      	blx	r6
 8001228:	2800      	cmp	r0, #0
 800122a:	dc06      	bgt.n	800123a <__sflush_r+0xfe>
 800122c:	89a3      	ldrh	r3, [r4, #12]
 800122e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001232:	81a3      	strh	r3, [r4, #12]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	e78e      	b.n	8001158 <__sflush_r+0x1c>
 800123a:	4407      	add	r7, r0
 800123c:	eba8 0800 	sub.w	r8, r8, r0
 8001240:	e7e9      	b.n	8001216 <__sflush_r+0xda>
 8001242:	bf00      	nop
 8001244:	20400001 	.word	0x20400001

08001248 <_fflush_r>:
 8001248:	b538      	push	{r3, r4, r5, lr}
 800124a:	690b      	ldr	r3, [r1, #16]
 800124c:	4605      	mov	r5, r0
 800124e:	460c      	mov	r4, r1
 8001250:	b1db      	cbz	r3, 800128a <_fflush_r+0x42>
 8001252:	b118      	cbz	r0, 800125c <_fflush_r+0x14>
 8001254:	6983      	ldr	r3, [r0, #24]
 8001256:	b90b      	cbnz	r3, 800125c <_fflush_r+0x14>
 8001258:	f000 f860 	bl	800131c <__sinit>
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <_fflush_r+0x48>)
 800125e:	429c      	cmp	r4, r3
 8001260:	d109      	bne.n	8001276 <_fflush_r+0x2e>
 8001262:	686c      	ldr	r4, [r5, #4]
 8001264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001268:	b17b      	cbz	r3, 800128a <_fflush_r+0x42>
 800126a:	4621      	mov	r1, r4
 800126c:	4628      	mov	r0, r5
 800126e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001272:	f7ff bf63 	b.w	800113c <__sflush_r>
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <_fflush_r+0x4c>)
 8001278:	429c      	cmp	r4, r3
 800127a:	d101      	bne.n	8001280 <_fflush_r+0x38>
 800127c:	68ac      	ldr	r4, [r5, #8]
 800127e:	e7f1      	b.n	8001264 <_fflush_r+0x1c>
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <_fflush_r+0x50>)
 8001282:	429c      	cmp	r4, r3
 8001284:	bf08      	it	eq
 8001286:	68ec      	ldreq	r4, [r5, #12]
 8001288:	e7ec      	b.n	8001264 <_fflush_r+0x1c>
 800128a:	2000      	movs	r0, #0
 800128c:	bd38      	pop	{r3, r4, r5, pc}
 800128e:	bf00      	nop
 8001290:	080018b0 	.word	0x080018b0
 8001294:	080018d0 	.word	0x080018d0
 8001298:	08001890 	.word	0x08001890

0800129c <std>:
 800129c:	2300      	movs	r3, #0
 800129e:	b510      	push	{r4, lr}
 80012a0:	4604      	mov	r4, r0
 80012a2:	e9c0 3300 	strd	r3, r3, [r0]
 80012a6:	6083      	str	r3, [r0, #8]
 80012a8:	8181      	strh	r1, [r0, #12]
 80012aa:	6643      	str	r3, [r0, #100]	; 0x64
 80012ac:	81c2      	strh	r2, [r0, #14]
 80012ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012b2:	6183      	str	r3, [r0, #24]
 80012b4:	4619      	mov	r1, r3
 80012b6:	2208      	movs	r2, #8
 80012b8:	305c      	adds	r0, #92	; 0x5c
 80012ba:	f7ff fe13 	bl	8000ee4 <memset>
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <std+0x38>)
 80012c0:	6263      	str	r3, [r4, #36]	; 0x24
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <std+0x3c>)
 80012c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <std+0x40>)
 80012c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <std+0x44>)
 80012cc:	6224      	str	r4, [r4, #32]
 80012ce:	6323      	str	r3, [r4, #48]	; 0x30
 80012d0:	bd10      	pop	{r4, pc}
 80012d2:	bf00      	nop
 80012d4:	08001669 	.word	0x08001669
 80012d8:	0800168b 	.word	0x0800168b
 80012dc:	080016c3 	.word	0x080016c3
 80012e0:	080016e7 	.word	0x080016e7

080012e4 <_cleanup_r>:
 80012e4:	4901      	ldr	r1, [pc, #4]	; (80012ec <_cleanup_r+0x8>)
 80012e6:	f000 b885 	b.w	80013f4 <_fwalk_reent>
 80012ea:	bf00      	nop
 80012ec:	08001249 	.word	0x08001249

080012f0 <__sfmoreglue>:
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	1e4a      	subs	r2, r1, #1
 80012f4:	2568      	movs	r5, #104	; 0x68
 80012f6:	4355      	muls	r5, r2
 80012f8:	460e      	mov	r6, r1
 80012fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80012fe:	f000 f949 	bl	8001594 <_malloc_r>
 8001302:	4604      	mov	r4, r0
 8001304:	b140      	cbz	r0, 8001318 <__sfmoreglue+0x28>
 8001306:	2100      	movs	r1, #0
 8001308:	e9c0 1600 	strd	r1, r6, [r0]
 800130c:	300c      	adds	r0, #12
 800130e:	60a0      	str	r0, [r4, #8]
 8001310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001314:	f7ff fde6 	bl	8000ee4 <memset>
 8001318:	4620      	mov	r0, r4
 800131a:	bd70      	pop	{r4, r5, r6, pc}

0800131c <__sinit>:
 800131c:	6983      	ldr	r3, [r0, #24]
 800131e:	b510      	push	{r4, lr}
 8001320:	4604      	mov	r4, r0
 8001322:	bb33      	cbnz	r3, 8001372 <__sinit+0x56>
 8001324:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001328:	6503      	str	r3, [r0, #80]	; 0x50
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <__sinit+0x58>)
 800132c:	4a12      	ldr	r2, [pc, #72]	; (8001378 <__sinit+0x5c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6282      	str	r2, [r0, #40]	; 0x28
 8001332:	4298      	cmp	r0, r3
 8001334:	bf04      	itt	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	6183      	streq	r3, [r0, #24]
 800133a:	f000 f81f 	bl	800137c <__sfp>
 800133e:	6060      	str	r0, [r4, #4]
 8001340:	4620      	mov	r0, r4
 8001342:	f000 f81b 	bl	800137c <__sfp>
 8001346:	60a0      	str	r0, [r4, #8]
 8001348:	4620      	mov	r0, r4
 800134a:	f000 f817 	bl	800137c <__sfp>
 800134e:	2200      	movs	r2, #0
 8001350:	60e0      	str	r0, [r4, #12]
 8001352:	2104      	movs	r1, #4
 8001354:	6860      	ldr	r0, [r4, #4]
 8001356:	f7ff ffa1 	bl	800129c <std>
 800135a:	2201      	movs	r2, #1
 800135c:	2109      	movs	r1, #9
 800135e:	68a0      	ldr	r0, [r4, #8]
 8001360:	f7ff ff9c 	bl	800129c <std>
 8001364:	2202      	movs	r2, #2
 8001366:	2112      	movs	r1, #18
 8001368:	68e0      	ldr	r0, [r4, #12]
 800136a:	f7ff ff97 	bl	800129c <std>
 800136e:	2301      	movs	r3, #1
 8001370:	61a3      	str	r3, [r4, #24]
 8001372:	bd10      	pop	{r4, pc}
 8001374:	0800188c 	.word	0x0800188c
 8001378:	080012e5 	.word	0x080012e5

0800137c <__sfp>:
 800137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <__sfp+0x70>)
 8001380:	681e      	ldr	r6, [r3, #0]
 8001382:	69b3      	ldr	r3, [r6, #24]
 8001384:	4607      	mov	r7, r0
 8001386:	b913      	cbnz	r3, 800138e <__sfp+0x12>
 8001388:	4630      	mov	r0, r6
 800138a:	f7ff ffc7 	bl	800131c <__sinit>
 800138e:	3648      	adds	r6, #72	; 0x48
 8001390:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001394:	3b01      	subs	r3, #1
 8001396:	d503      	bpl.n	80013a0 <__sfp+0x24>
 8001398:	6833      	ldr	r3, [r6, #0]
 800139a:	b133      	cbz	r3, 80013aa <__sfp+0x2e>
 800139c:	6836      	ldr	r6, [r6, #0]
 800139e:	e7f7      	b.n	8001390 <__sfp+0x14>
 80013a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80013a4:	b16d      	cbz	r5, 80013c2 <__sfp+0x46>
 80013a6:	3468      	adds	r4, #104	; 0x68
 80013a8:	e7f4      	b.n	8001394 <__sfp+0x18>
 80013aa:	2104      	movs	r1, #4
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff ff9f 	bl	80012f0 <__sfmoreglue>
 80013b2:	6030      	str	r0, [r6, #0]
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d1f1      	bne.n	800139c <__sfp+0x20>
 80013b8:	230c      	movs	r3, #12
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	4604      	mov	r4, r0
 80013be:	4620      	mov	r0, r4
 80013c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <__sfp+0x74>)
 80013c4:	6665      	str	r5, [r4, #100]	; 0x64
 80013c6:	e9c4 5500 	strd	r5, r5, [r4]
 80013ca:	60a5      	str	r5, [r4, #8]
 80013cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80013d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80013d4:	2208      	movs	r2, #8
 80013d6:	4629      	mov	r1, r5
 80013d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80013dc:	f7ff fd82 	bl	8000ee4 <memset>
 80013e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80013e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80013e8:	e7e9      	b.n	80013be <__sfp+0x42>
 80013ea:	bf00      	nop
 80013ec:	0800188c 	.word	0x0800188c
 80013f0:	ffff0001 	.word	0xffff0001

080013f4 <_fwalk_reent>:
 80013f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013f8:	4680      	mov	r8, r0
 80013fa:	4689      	mov	r9, r1
 80013fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001400:	2600      	movs	r6, #0
 8001402:	b914      	cbnz	r4, 800140a <_fwalk_reent+0x16>
 8001404:	4630      	mov	r0, r6
 8001406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800140a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800140e:	3f01      	subs	r7, #1
 8001410:	d501      	bpl.n	8001416 <_fwalk_reent+0x22>
 8001412:	6824      	ldr	r4, [r4, #0]
 8001414:	e7f5      	b.n	8001402 <_fwalk_reent+0xe>
 8001416:	89ab      	ldrh	r3, [r5, #12]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d907      	bls.n	800142c <_fwalk_reent+0x38>
 800141c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001420:	3301      	adds	r3, #1
 8001422:	d003      	beq.n	800142c <_fwalk_reent+0x38>
 8001424:	4629      	mov	r1, r5
 8001426:	4640      	mov	r0, r8
 8001428:	47c8      	blx	r9
 800142a:	4306      	orrs	r6, r0
 800142c:	3568      	adds	r5, #104	; 0x68
 800142e:	e7ee      	b.n	800140e <_fwalk_reent+0x1a>

08001430 <__swhatbuf_r>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	460e      	mov	r6, r1
 8001434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001438:	2900      	cmp	r1, #0
 800143a:	b096      	sub	sp, #88	; 0x58
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	da07      	bge.n	8001452 <__swhatbuf_r+0x22>
 8001442:	2300      	movs	r3, #0
 8001444:	602b      	str	r3, [r5, #0]
 8001446:	89b3      	ldrh	r3, [r6, #12]
 8001448:	061a      	lsls	r2, r3, #24
 800144a:	d410      	bmi.n	800146e <__swhatbuf_r+0x3e>
 800144c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001450:	e00e      	b.n	8001470 <__swhatbuf_r+0x40>
 8001452:	466a      	mov	r2, sp
 8001454:	f000 f96e 	bl	8001734 <_fstat_r>
 8001458:	2800      	cmp	r0, #0
 800145a:	dbf2      	blt.n	8001442 <__swhatbuf_r+0x12>
 800145c:	9a01      	ldr	r2, [sp, #4]
 800145e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001462:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001466:	425a      	negs	r2, r3
 8001468:	415a      	adcs	r2, r3
 800146a:	602a      	str	r2, [r5, #0]
 800146c:	e7ee      	b.n	800144c <__swhatbuf_r+0x1c>
 800146e:	2340      	movs	r3, #64	; 0x40
 8001470:	2000      	movs	r0, #0
 8001472:	6023      	str	r3, [r4, #0]
 8001474:	b016      	add	sp, #88	; 0x58
 8001476:	bd70      	pop	{r4, r5, r6, pc}

08001478 <__smakebuf_r>:
 8001478:	898b      	ldrh	r3, [r1, #12]
 800147a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800147c:	079d      	lsls	r5, r3, #30
 800147e:	4606      	mov	r6, r0
 8001480:	460c      	mov	r4, r1
 8001482:	d507      	bpl.n	8001494 <__smakebuf_r+0x1c>
 8001484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001488:	6023      	str	r3, [r4, #0]
 800148a:	6123      	str	r3, [r4, #16]
 800148c:	2301      	movs	r3, #1
 800148e:	6163      	str	r3, [r4, #20]
 8001490:	b002      	add	sp, #8
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	ab01      	add	r3, sp, #4
 8001496:	466a      	mov	r2, sp
 8001498:	f7ff ffca 	bl	8001430 <__swhatbuf_r>
 800149c:	9900      	ldr	r1, [sp, #0]
 800149e:	4605      	mov	r5, r0
 80014a0:	4630      	mov	r0, r6
 80014a2:	f000 f877 	bl	8001594 <_malloc_r>
 80014a6:	b948      	cbnz	r0, 80014bc <__smakebuf_r+0x44>
 80014a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ac:	059a      	lsls	r2, r3, #22
 80014ae:	d4ef      	bmi.n	8001490 <__smakebuf_r+0x18>
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	81a3      	strh	r3, [r4, #12]
 80014ba:	e7e3      	b.n	8001484 <__smakebuf_r+0xc>
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <__smakebuf_r+0x7c>)
 80014be:	62b3      	str	r3, [r6, #40]	; 0x28
 80014c0:	89a3      	ldrh	r3, [r4, #12]
 80014c2:	6020      	str	r0, [r4, #0]
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	81a3      	strh	r3, [r4, #12]
 80014ca:	9b00      	ldr	r3, [sp, #0]
 80014cc:	6163      	str	r3, [r4, #20]
 80014ce:	9b01      	ldr	r3, [sp, #4]
 80014d0:	6120      	str	r0, [r4, #16]
 80014d2:	b15b      	cbz	r3, 80014ec <__smakebuf_r+0x74>
 80014d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d8:	4630      	mov	r0, r6
 80014da:	f000 f93d 	bl	8001758 <_isatty_r>
 80014de:	b128      	cbz	r0, 80014ec <__smakebuf_r+0x74>
 80014e0:	89a3      	ldrh	r3, [r4, #12]
 80014e2:	f023 0303 	bic.w	r3, r3, #3
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	81a3      	strh	r3, [r4, #12]
 80014ec:	89a3      	ldrh	r3, [r4, #12]
 80014ee:	431d      	orrs	r5, r3
 80014f0:	81a5      	strh	r5, [r4, #12]
 80014f2:	e7cd      	b.n	8001490 <__smakebuf_r+0x18>
 80014f4:	080012e5 	.word	0x080012e5

080014f8 <_free_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	4605      	mov	r5, r0
 80014fc:	2900      	cmp	r1, #0
 80014fe:	d045      	beq.n	800158c <_free_r+0x94>
 8001500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001504:	1f0c      	subs	r4, r1, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	bfb8      	it	lt
 800150a:	18e4      	addlt	r4, r4, r3
 800150c:	f000 f946 	bl	800179c <__malloc_lock>
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <_free_r+0x98>)
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	4610      	mov	r0, r2
 8001516:	b933      	cbnz	r3, 8001526 <_free_r+0x2e>
 8001518:	6063      	str	r3, [r4, #4]
 800151a:	6014      	str	r4, [r2, #0]
 800151c:	4628      	mov	r0, r5
 800151e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001522:	f000 b93c 	b.w	800179e <__malloc_unlock>
 8001526:	42a3      	cmp	r3, r4
 8001528:	d90c      	bls.n	8001544 <_free_r+0x4c>
 800152a:	6821      	ldr	r1, [r4, #0]
 800152c:	1862      	adds	r2, r4, r1
 800152e:	4293      	cmp	r3, r2
 8001530:	bf04      	itt	eq
 8001532:	681a      	ldreq	r2, [r3, #0]
 8001534:	685b      	ldreq	r3, [r3, #4]
 8001536:	6063      	str	r3, [r4, #4]
 8001538:	bf04      	itt	eq
 800153a:	1852      	addeq	r2, r2, r1
 800153c:	6022      	streq	r2, [r4, #0]
 800153e:	6004      	str	r4, [r0, #0]
 8001540:	e7ec      	b.n	800151c <_free_r+0x24>
 8001542:	4613      	mov	r3, r2
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	b10a      	cbz	r2, 800154c <_free_r+0x54>
 8001548:	42a2      	cmp	r2, r4
 800154a:	d9fa      	bls.n	8001542 <_free_r+0x4a>
 800154c:	6819      	ldr	r1, [r3, #0]
 800154e:	1858      	adds	r0, r3, r1
 8001550:	42a0      	cmp	r0, r4
 8001552:	d10b      	bne.n	800156c <_free_r+0x74>
 8001554:	6820      	ldr	r0, [r4, #0]
 8001556:	4401      	add	r1, r0
 8001558:	1858      	adds	r0, r3, r1
 800155a:	4282      	cmp	r2, r0
 800155c:	6019      	str	r1, [r3, #0]
 800155e:	d1dd      	bne.n	800151c <_free_r+0x24>
 8001560:	6810      	ldr	r0, [r2, #0]
 8001562:	6852      	ldr	r2, [r2, #4]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	4401      	add	r1, r0
 8001568:	6019      	str	r1, [r3, #0]
 800156a:	e7d7      	b.n	800151c <_free_r+0x24>
 800156c:	d902      	bls.n	8001574 <_free_r+0x7c>
 800156e:	230c      	movs	r3, #12
 8001570:	602b      	str	r3, [r5, #0]
 8001572:	e7d3      	b.n	800151c <_free_r+0x24>
 8001574:	6820      	ldr	r0, [r4, #0]
 8001576:	1821      	adds	r1, r4, r0
 8001578:	428a      	cmp	r2, r1
 800157a:	bf04      	itt	eq
 800157c:	6811      	ldreq	r1, [r2, #0]
 800157e:	6852      	ldreq	r2, [r2, #4]
 8001580:	6062      	str	r2, [r4, #4]
 8001582:	bf04      	itt	eq
 8001584:	1809      	addeq	r1, r1, r0
 8001586:	6021      	streq	r1, [r4, #0]
 8001588:	605c      	str	r4, [r3, #4]
 800158a:	e7c7      	b.n	800151c <_free_r+0x24>
 800158c:	bd38      	pop	{r3, r4, r5, pc}
 800158e:	bf00      	nop
 8001590:	20000090 	.word	0x20000090

08001594 <_malloc_r>:
 8001594:	b570      	push	{r4, r5, r6, lr}
 8001596:	1ccd      	adds	r5, r1, #3
 8001598:	f025 0503 	bic.w	r5, r5, #3
 800159c:	3508      	adds	r5, #8
 800159e:	2d0c      	cmp	r5, #12
 80015a0:	bf38      	it	cc
 80015a2:	250c      	movcc	r5, #12
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	4606      	mov	r6, r0
 80015a8:	db01      	blt.n	80015ae <_malloc_r+0x1a>
 80015aa:	42a9      	cmp	r1, r5
 80015ac:	d903      	bls.n	80015b6 <_malloc_r+0x22>
 80015ae:	230c      	movs	r3, #12
 80015b0:	6033      	str	r3, [r6, #0]
 80015b2:	2000      	movs	r0, #0
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
 80015b6:	f000 f8f1 	bl	800179c <__malloc_lock>
 80015ba:	4a21      	ldr	r2, [pc, #132]	; (8001640 <_malloc_r+0xac>)
 80015bc:	6814      	ldr	r4, [r2, #0]
 80015be:	4621      	mov	r1, r4
 80015c0:	b991      	cbnz	r1, 80015e8 <_malloc_r+0x54>
 80015c2:	4c20      	ldr	r4, [pc, #128]	; (8001644 <_malloc_r+0xb0>)
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	b91b      	cbnz	r3, 80015d0 <_malloc_r+0x3c>
 80015c8:	4630      	mov	r0, r6
 80015ca:	f000 f83d 	bl	8001648 <_sbrk_r>
 80015ce:	6020      	str	r0, [r4, #0]
 80015d0:	4629      	mov	r1, r5
 80015d2:	4630      	mov	r0, r6
 80015d4:	f000 f838 	bl	8001648 <_sbrk_r>
 80015d8:	1c43      	adds	r3, r0, #1
 80015da:	d124      	bne.n	8001626 <_malloc_r+0x92>
 80015dc:	230c      	movs	r3, #12
 80015de:	6033      	str	r3, [r6, #0]
 80015e0:	4630      	mov	r0, r6
 80015e2:	f000 f8dc 	bl	800179e <__malloc_unlock>
 80015e6:	e7e4      	b.n	80015b2 <_malloc_r+0x1e>
 80015e8:	680b      	ldr	r3, [r1, #0]
 80015ea:	1b5b      	subs	r3, r3, r5
 80015ec:	d418      	bmi.n	8001620 <_malloc_r+0x8c>
 80015ee:	2b0b      	cmp	r3, #11
 80015f0:	d90f      	bls.n	8001612 <_malloc_r+0x7e>
 80015f2:	600b      	str	r3, [r1, #0]
 80015f4:	50cd      	str	r5, [r1, r3]
 80015f6:	18cc      	adds	r4, r1, r3
 80015f8:	4630      	mov	r0, r6
 80015fa:	f000 f8d0 	bl	800179e <__malloc_unlock>
 80015fe:	f104 000b 	add.w	r0, r4, #11
 8001602:	1d23      	adds	r3, r4, #4
 8001604:	f020 0007 	bic.w	r0, r0, #7
 8001608:	1ac3      	subs	r3, r0, r3
 800160a:	d0d3      	beq.n	80015b4 <_malloc_r+0x20>
 800160c:	425a      	negs	r2, r3
 800160e:	50e2      	str	r2, [r4, r3]
 8001610:	e7d0      	b.n	80015b4 <_malloc_r+0x20>
 8001612:	428c      	cmp	r4, r1
 8001614:	684b      	ldr	r3, [r1, #4]
 8001616:	bf16      	itet	ne
 8001618:	6063      	strne	r3, [r4, #4]
 800161a:	6013      	streq	r3, [r2, #0]
 800161c:	460c      	movne	r4, r1
 800161e:	e7eb      	b.n	80015f8 <_malloc_r+0x64>
 8001620:	460c      	mov	r4, r1
 8001622:	6849      	ldr	r1, [r1, #4]
 8001624:	e7cc      	b.n	80015c0 <_malloc_r+0x2c>
 8001626:	1cc4      	adds	r4, r0, #3
 8001628:	f024 0403 	bic.w	r4, r4, #3
 800162c:	42a0      	cmp	r0, r4
 800162e:	d005      	beq.n	800163c <_malloc_r+0xa8>
 8001630:	1a21      	subs	r1, r4, r0
 8001632:	4630      	mov	r0, r6
 8001634:	f000 f808 	bl	8001648 <_sbrk_r>
 8001638:	3001      	adds	r0, #1
 800163a:	d0cf      	beq.n	80015dc <_malloc_r+0x48>
 800163c:	6025      	str	r5, [r4, #0]
 800163e:	e7db      	b.n	80015f8 <_malloc_r+0x64>
 8001640:	20000090 	.word	0x20000090
 8001644:	20000094 	.word	0x20000094

08001648 <_sbrk_r>:
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4c06      	ldr	r4, [pc, #24]	; (8001664 <_sbrk_r+0x1c>)
 800164c:	2300      	movs	r3, #0
 800164e:	4605      	mov	r5, r0
 8001650:	4608      	mov	r0, r1
 8001652:	6023      	str	r3, [r4, #0]
 8001654:	f000 f8de 	bl	8001814 <_sbrk>
 8001658:	1c43      	adds	r3, r0, #1
 800165a:	d102      	bne.n	8001662 <_sbrk_r+0x1a>
 800165c:	6823      	ldr	r3, [r4, #0]
 800165e:	b103      	cbz	r3, 8001662 <_sbrk_r+0x1a>
 8001660:	602b      	str	r3, [r5, #0]
 8001662:	bd38      	pop	{r3, r4, r5, pc}
 8001664:	2000009c 	.word	0x2000009c

08001668 <__sread>:
 8001668:	b510      	push	{r4, lr}
 800166a:	460c      	mov	r4, r1
 800166c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001670:	f000 f896 	bl	80017a0 <_read_r>
 8001674:	2800      	cmp	r0, #0
 8001676:	bfab      	itete	ge
 8001678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800167a:	89a3      	ldrhlt	r3, [r4, #12]
 800167c:	181b      	addge	r3, r3, r0
 800167e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001682:	bfac      	ite	ge
 8001684:	6563      	strge	r3, [r4, #84]	; 0x54
 8001686:	81a3      	strhlt	r3, [r4, #12]
 8001688:	bd10      	pop	{r4, pc}

0800168a <__swrite>:
 800168a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800168e:	461f      	mov	r7, r3
 8001690:	898b      	ldrh	r3, [r1, #12]
 8001692:	05db      	lsls	r3, r3, #23
 8001694:	4605      	mov	r5, r0
 8001696:	460c      	mov	r4, r1
 8001698:	4616      	mov	r6, r2
 800169a:	d505      	bpl.n	80016a8 <__swrite+0x1e>
 800169c:	2302      	movs	r3, #2
 800169e:	2200      	movs	r2, #0
 80016a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a4:	f000 f868 	bl	8001778 <_lseek_r>
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b2:	81a3      	strh	r3, [r4, #12]
 80016b4:	4632      	mov	r2, r6
 80016b6:	463b      	mov	r3, r7
 80016b8:	4628      	mov	r0, r5
 80016ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016be:	f000 b817 	b.w	80016f0 <_write_r>

080016c2 <__sseek>:
 80016c2:	b510      	push	{r4, lr}
 80016c4:	460c      	mov	r4, r1
 80016c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ca:	f000 f855 	bl	8001778 <_lseek_r>
 80016ce:	1c43      	adds	r3, r0, #1
 80016d0:	89a3      	ldrh	r3, [r4, #12]
 80016d2:	bf15      	itete	ne
 80016d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80016d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80016da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80016de:	81a3      	strheq	r3, [r4, #12]
 80016e0:	bf18      	it	ne
 80016e2:	81a3      	strhne	r3, [r4, #12]
 80016e4:	bd10      	pop	{r4, pc}

080016e6 <__sclose>:
 80016e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ea:	f000 b813 	b.w	8001714 <_close_r>
	...

080016f0 <_write_r>:
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4c07      	ldr	r4, [pc, #28]	; (8001710 <_write_r+0x20>)
 80016f4:	4605      	mov	r5, r0
 80016f6:	4608      	mov	r0, r1
 80016f8:	4611      	mov	r1, r2
 80016fa:	2200      	movs	r2, #0
 80016fc:	6022      	str	r2, [r4, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	f000 f896 	bl	8001830 <_write>
 8001704:	1c43      	adds	r3, r0, #1
 8001706:	d102      	bne.n	800170e <_write_r+0x1e>
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	b103      	cbz	r3, 800170e <_write_r+0x1e>
 800170c:	602b      	str	r3, [r5, #0]
 800170e:	bd38      	pop	{r3, r4, r5, pc}
 8001710:	2000009c 	.word	0x2000009c

08001714 <_close_r>:
 8001714:	b538      	push	{r3, r4, r5, lr}
 8001716:	4c06      	ldr	r4, [pc, #24]	; (8001730 <_close_r+0x1c>)
 8001718:	2300      	movs	r3, #0
 800171a:	4605      	mov	r5, r0
 800171c:	4608      	mov	r0, r1
 800171e:	6023      	str	r3, [r4, #0]
 8001720:	f000 f850 	bl	80017c4 <_close>
 8001724:	1c43      	adds	r3, r0, #1
 8001726:	d102      	bne.n	800172e <_close_r+0x1a>
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	b103      	cbz	r3, 800172e <_close_r+0x1a>
 800172c:	602b      	str	r3, [r5, #0]
 800172e:	bd38      	pop	{r3, r4, r5, pc}
 8001730:	2000009c 	.word	0x2000009c

08001734 <_fstat_r>:
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4c07      	ldr	r4, [pc, #28]	; (8001754 <_fstat_r+0x20>)
 8001738:	2300      	movs	r3, #0
 800173a:	4605      	mov	r5, r0
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	f000 f847 	bl	80017d4 <_fstat>
 8001746:	1c43      	adds	r3, r0, #1
 8001748:	d102      	bne.n	8001750 <_fstat_r+0x1c>
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	b103      	cbz	r3, 8001750 <_fstat_r+0x1c>
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	bd38      	pop	{r3, r4, r5, pc}
 8001752:	bf00      	nop
 8001754:	2000009c 	.word	0x2000009c

08001758 <_isatty_r>:
 8001758:	b538      	push	{r3, r4, r5, lr}
 800175a:	4c06      	ldr	r4, [pc, #24]	; (8001774 <_isatty_r+0x1c>)
 800175c:	2300      	movs	r3, #0
 800175e:	4605      	mov	r5, r0
 8001760:	4608      	mov	r0, r1
 8001762:	6023      	str	r3, [r4, #0]
 8001764:	f000 f83e 	bl	80017e4 <_isatty>
 8001768:	1c43      	adds	r3, r0, #1
 800176a:	d102      	bne.n	8001772 <_isatty_r+0x1a>
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	b103      	cbz	r3, 8001772 <_isatty_r+0x1a>
 8001770:	602b      	str	r3, [r5, #0]
 8001772:	bd38      	pop	{r3, r4, r5, pc}
 8001774:	2000009c 	.word	0x2000009c

08001778 <_lseek_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4c07      	ldr	r4, [pc, #28]	; (8001798 <_lseek_r+0x20>)
 800177c:	4605      	mov	r5, r0
 800177e:	4608      	mov	r0, r1
 8001780:	4611      	mov	r1, r2
 8001782:	2200      	movs	r2, #0
 8001784:	6022      	str	r2, [r4, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	f000 f834 	bl	80017f4 <_lseek>
 800178c:	1c43      	adds	r3, r0, #1
 800178e:	d102      	bne.n	8001796 <_lseek_r+0x1e>
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	b103      	cbz	r3, 8001796 <_lseek_r+0x1e>
 8001794:	602b      	str	r3, [r5, #0]
 8001796:	bd38      	pop	{r3, r4, r5, pc}
 8001798:	2000009c 	.word	0x2000009c

0800179c <__malloc_lock>:
 800179c:	4770      	bx	lr

0800179e <__malloc_unlock>:
 800179e:	4770      	bx	lr

080017a0 <_read_r>:
 80017a0:	b538      	push	{r3, r4, r5, lr}
 80017a2:	4c07      	ldr	r4, [pc, #28]	; (80017c0 <_read_r+0x20>)
 80017a4:	4605      	mov	r5, r0
 80017a6:	4608      	mov	r0, r1
 80017a8:	4611      	mov	r1, r2
 80017aa:	2200      	movs	r2, #0
 80017ac:	6022      	str	r2, [r4, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	f000 f828 	bl	8001804 <_read>
 80017b4:	1c43      	adds	r3, r0, #1
 80017b6:	d102      	bne.n	80017be <_read_r+0x1e>
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	b103      	cbz	r3, 80017be <_read_r+0x1e>
 80017bc:	602b      	str	r3, [r5, #0]
 80017be:	bd38      	pop	{r3, r4, r5, pc}
 80017c0:	2000009c 	.word	0x2000009c

080017c4 <_close>:
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <_close+0xc>)
 80017c6:	2258      	movs	r2, #88	; 0x58
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	f04f 30ff 	mov.w	r0, #4294967295
 80017ce:	4770      	bx	lr
 80017d0:	2000009c 	.word	0x2000009c

080017d4 <_fstat>:
 80017d4:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <_fstat+0xc>)
 80017d6:	2258      	movs	r2, #88	; 0x58
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	f04f 30ff 	mov.w	r0, #4294967295
 80017de:	4770      	bx	lr
 80017e0:	2000009c 	.word	0x2000009c

080017e4 <_isatty>:
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <_isatty+0xc>)
 80017e6:	2258      	movs	r2, #88	; 0x58
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	2000      	movs	r0, #0
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2000009c 	.word	0x2000009c

080017f4 <_lseek>:
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <_lseek+0xc>)
 80017f6:	2258      	movs	r2, #88	; 0x58
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f04f 30ff 	mov.w	r0, #4294967295
 80017fe:	4770      	bx	lr
 8001800:	2000009c 	.word	0x2000009c

08001804 <_read>:
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <_read+0xc>)
 8001806:	2258      	movs	r2, #88	; 0x58
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f04f 30ff 	mov.w	r0, #4294967295
 800180e:	4770      	bx	lr
 8001810:	2000009c 	.word	0x2000009c

08001814 <_sbrk>:
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <_sbrk+0x14>)
 8001816:	6819      	ldr	r1, [r3, #0]
 8001818:	4602      	mov	r2, r0
 800181a:	b909      	cbnz	r1, 8001820 <_sbrk+0xc>
 800181c:	4903      	ldr	r1, [pc, #12]	; (800182c <_sbrk+0x18>)
 800181e:	6019      	str	r1, [r3, #0]
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	4402      	add	r2, r0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	4770      	bx	lr
 8001828:	20000098 	.word	0x20000098
 800182c:	200000a0 	.word	0x200000a0

08001830 <_write>:
 8001830:	4b02      	ldr	r3, [pc, #8]	; (800183c <_write+0xc>)
 8001832:	2258      	movs	r2, #88	; 0x58
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f04f 30ff 	mov.w	r0, #4294967295
 800183a:	4770      	bx	lr
 800183c:	2000009c 	.word	0x2000009c

08001840 <_init>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	bf00      	nop
 8001844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001846:	bc08      	pop	{r3}
 8001848:	469e      	mov	lr, r3
 800184a:	4770      	bx	lr

0800184c <_fini>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	bf00      	nop
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr
